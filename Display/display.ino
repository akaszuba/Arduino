#include <Wire.h>

#define SSD1306_SETCONTRAST 0x81
#define SSD1306_DISPLAYALLON_RESUME 0xA4
#define SSD1306_DISPLAYALLON 0xA5
#define SSD1306_NORMALDISPLAY 0xA6
#define SSD1306_INVERTDISPLAY 0xA7
#define SSD1306_DISPLAYOFF 0xAE
#define SSD1306_DISPLAYON 0xAF
#define SSD1306_SETDISPLAYOFFSET 0xD3
#define SSD1306_SETCOMPINS 0xDA
#define SSD1306_SETVCOMDETECT 0xDB
#define SSD1306_SETDISPLAYCLOCKDIV 0xD5
#define SSD1306_SETPRECHARGE 0xD9
#define SSD1306_SETMULTIPLEX 0xA8
#define SSD1306_SETLOWCOLUMN 0x00
#define SSD1306_SETHIGHCOLUMN 0x10
#define SSD1306_SETSTARTLINE 0x40
#define SSD1306_MEMORYMODE 0x20
#define SSD1306_COLUMNADDR 0x21
#define SSD1306_PAGEADDR 0x22
#define SSD1306_COMSCANINC 0xC0
#define SSD1306_COMSCANDEC 0xC8
#define SSD1306_SEGREMAP 0xA0
#define SSD1306_CHARGEPUMP 0x8D
#define SSD1306_EXTERNALVCC 0x1
#define SSD1306_SWITCHCAPVCC 0x2

#define LED_PIN 32
#define BUTTON_PIN 0


#define SSD1306_LCDHEIGHT 32
#define SSD1306_LCDWIDTH 128

const long interval = 1000;     
unsigned long previousMillis = 0;              
int ledState = LOW;             
byte charA[4] = {0xFE,0x09,0x09,0xFE};

const byte displayAddress = 0x3C;
static uint8_t buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFE, 0x09, 0x09, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};


void setup()
{
  delay(2000);
  Serial.begin(115200);
  Wire.begin();
  Serial.println("\nI2C Scanner");
  initDisplay();
  Serial.println("init done");
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUTTON_PIN,INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN),przycisk,RISING);
}

void przycisk(){
Serial.println("przycisk");
drawPixel(0,0);
drawPixel(1,1);
drawPixel(1,2);
drawPixel(3,3);
}

void draw(byte* content){
  for(int i = 0; i< 4; i++){
    buffer[i] = content[i];
  }
  //Serial.println(content);
}

void drawPixel(int x, int y){

 buffer[y] |= (1ULL<<(x));
}

void loop()
{
  unsigned long currentMillis = millis(); 
 if (currentMillis - previousMillis >= interval) {
     previousMillis = currentMillis;
     Serial.println("loop");

  refresh();
    
     if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }
    digitalWrite(LED_PIN, ledState);
  }  
}

void refresh()
{
  displayCommand(SSD1306_COLUMNADDR);
  displayCommand(0);                    // Column start address (0 = reset)
  displayCommand(SSD1306_LCDWIDTH - 1); // Column end address (127 = reset)

  displayCommand(SSD1306_PAGEADDR);
  displayCommand(0); // Page start address (0 = reset)

  displayCommand(3); // Page end address

  for (uint16_t i = 0; i < (SSD1306_LCDWIDTH * SSD1306_LCDHEIGHT / 8); i++)
  {
    // send a bunch of data in one xmission
    Wire.beginTransmission(displayAddress);
    Wire.write(0x40);
    for (uint8_t x = 0; x < 16; x++)
    {
      Wire.write(buffer[i]);
      i++;
    }
    i--;
    Wire.endTransmission();
  }
}

void initDisplay()
{
  Serial.println("init");
  displayCommand(SSD1306_DISPLAYOFF); // 0xAE
  Serial.println("init");
  displayCommand(SSD1306_SETDISPLAYCLOCKDIV); // 0xD5
  displayCommand(0x00);                       // the suggested ratio 0x00
  displayCommand(SSD1306_SETMULTIPLEX);       // 0xA8
  displayCommand(0x1F);
  displayCommand(SSD1306_SETDISPLAYOFFSET);   // 0xD3
  displayCommand(0x0);                        // no offset
  displayCommand(SSD1306_SETSTARTLINE | 0x0); // line #0
  displayCommand(SSD1306_CHARGEPUMP);         // 0x8D
  displayCommand(0x14);
  displayCommand(SSD1306_MEMORYMODE); // 0x20
  displayCommand(0x00);               // 0x0 act like ks0108
  displayCommand(SSD1306_SEGREMAP | 0x1);
  displayCommand(SSD1306_COMSCANDEC);
  displayCommand(SSD1306_SETCOMPINS); // 0xDA
  displayCommand(0x02);
  displayCommand(SSD1306_SETCONTRAST); // 0x81
  displayCommand(0x8F);
  displayCommand(SSD1306_SETPRECHARGE); // 0xd9
  displayCommand(0xF1);
  displayCommand(SSD1306_SETVCOMDETECT); // 0xDB
  displayCommand(0x40);
  displayCommand(SSD1306_DISPLAYALLON_RESUME); // 0xA4
  displayCommand(SSD1306_NORMALDISPLAY);
  displayCommand(SSD1306_DISPLAYON);
}

void displayCommand(int command)
{
  int control = 0x00; // Co = 0, D/C = 0
  Wire.beginTransmission(displayAddress);
  Wire.write(control);
  Wire.write(command);
  Wire.endTransmission();
}

void displayData(byte command)
{
  byte control = 0x40; // Co = 0, D/C = 1
  Wire.beginTransmission(displayAddress);
  Wire.write(control);
  Wire.write(command);
  Wire.endTransmission();
}
